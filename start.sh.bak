#!/bin/bash

# Function to free up required ports
free_ports() {
    local ports=(2222 5000 5001 8080 8443 2121 3306)
    for port in "${ports[@]}"; do
        if lsof -i:"$port" >/dev/null 2>&1; then
            echo "Found process using port $port. Attempting to free it..."
            sudo lsof -ti:"$port" | xargs sudo kill -9 2>/dev/null
            sleep 2
            if lsof -i:"$port" >/dev/null 2>&1; then
                echo "Failed to free port $port"
                return 1
            fi
            echo "Successfully freed port $port"
        fi
    done
    return 0
}

# Free up ports before starting
echo "Checking and freeing required ports..."
if ! free_ports; then
    echo "Failed to free all required ports. Please check running processes manually."
    exit 1
fi

# Create all necessary directories with proper permissions
echo "Setting up directories..."
sudo rm -rf ssh_keys certs  # Remove existing directories to ensure clean setup
sudo mkdir -p ssh_keys certs logs config pcaps
sudo chmod 777 ssh_keys certs logs config pcaps  # Give full permissions to directories

# Generate SSH host key
echo "Generating SSH host key..."
ssh-keygen -t rsa -b 2048 -f ssh_keys/server.key -N "" -C "honeypot@localhost"
sudo chmod 666 ssh_keys/server.key  # Make key readable by honeypot

# Generate SSL certificates for HTTPS
echo "Generating SSL certificates..."
openssl req -x509 -newkey rsa:2048 -keyout certs/server.key -out certs/server.crt -days 365 -nodes -subj "/CN=localhost"
sudo chmod 666 certs/server.key certs/server.crt  # Make certificates readable by honeypot

# Function to check if a Python package is installed
check_package() {
    python3 -c "import $1" 2>/dev/null
    return $?
}

# Install required packages if not already installed
echo "Checking and installing required packages..."
REQUIRED_PACKAGES=("paramiko" "flask")

for package in "${REQUIRED_PACKAGES[@]}"; do
    if ! check_package "$package"; then
        echo "Installing $package..."
        pip install "$package"
    else
        echo "$package already installed."
    fi
done

# Function to start a service
start_service() {
    service_name=$1
    script_path=$2
    echo "Starting $service_name..."
    python3 "$script_path" &
    sleep 2  # Give the service time to start
}

# Function to verify ports are free
verify_ports() {
    local ports=(2222 5000 5001 8080 8443 2121 3306)
    for port in "${ports[@]}"; do
        if lsof -i:"$port" >/dev/null 2>&1; then
            echo "Error: Port $port is still in use after attempting to free it"
            return 1
        fi
    done
    return 0
}

# Clean up function
cleanup() {
    echo "Shutting down honeypot services..."
    pkill -f "python3 src/unified_honeypot.py"
    pkill -f "python3 src/unified_dashboard.py"
    exit 0
}

# Set up trap for cleanup on script termination
trap cleanup SIGINT SIGTERM

# Verify all ports are free before proceeding
if ! verify_ports; then
    echo "Some ports are still in use. Please check running processes manually."
    exit 1
fi

# Start the unified honeypot
start_service "Unified Honeypot" "src/unified_honeypot.py"

# Start the dashboard
start_service "Dashboard" "src/unified_dashboard.py"

echo "All services started successfully!"
echo "Access the dashboard at http://localhost:5001"
echo "SSH Honeypot running on port 2222"
echo "HTTP Honeypot running on port 8080"
echo "HTTPS Honeypot running on port 8443"
echo "FTP Honeypot running on port 2121"
echo "MySQL Honeypot running on port 3306"
echo ""
echo "Press Ctrl+C to stop all services"

# Keep the script running and monitor child processes
while true; do
    sleep 1
done